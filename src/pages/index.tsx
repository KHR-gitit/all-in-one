import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { SignInButton, useUser } from "@clerk/nextjs";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import {LoadingPage} from "~/components/loading";
import { useState } from "react";
dayjs.extend(relativeTime);




const CreatePostWizzard = () => {
  const {user} = useUser();

  const [input, setInput] = useState<string>("");

  const ctx = api.useContext();

  const {mutate, isLoading:isPosting} = api.posts.create.useMutation({onSuccess:()=>{
    setInput("");
    void ctx.posts.getAll.invalidate();
  }});


  if (!user) return null;

  return <div className="flex gap-3 w-full">
    <Image className="w-14 h-14 rounded-full" width={56} height={56} src={user.profileImageUrl} alt="profile image" />
    <input type="text" placeholder="write here" className="bg-transparent grow outline-none" value={input} onChange={(e)=> setInput(e.target.value)} disabled={isPosting}/>
    <button onClick={()=> mutate({content: input})}>post</button>
  </div>
}

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props:PostWithUser) => {
  const {post, user} = props;
return <div key={post.id} className="border-b border-slate-400 p-4 py-8 flex items-center gap-3">
        <Image className="w-14 h-14 rounded-full" width={56} height={56} src={user.profileImageUrl} alt={`@${user.username}'s profile picture`} />
        <div className="flex flex-col">
          <div className="flex text-slate-300 gap-1">
            <span>{`@${user.username}`} </span>
            <span className="font-thin">{`Â· ${dayjs(post.createdAt).fromNow()}`}</span>
          </div>
          <span className="text-xl">
            {post.content}
          </span>

        </div>
      </div>
}
const Feed = () => {
  const {data, isLoading: postsLoading} = api.posts.getAll.useQuery();
  if (postsLoading) return <LoadingPage/>
  if (!data) return <div>Something went wrong</div>;
  return (
    <div>
    {data?.map((fullPost)=>(
      <PostView {...fullPost} key={fullPost.post.id}/>
    ))}
  </div>
  )
}
const Home: NextPage = () => {

  const {isLoaded:userLoaded, isSignedIn} = useUser();
  
  api.posts.getAll.useQuery()

  if (!userLoaded) return <div/>;




  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="w-full md:max-w-2xl  border-x h-full border-slate-400">
          <div className="border-b border-slate-400 p-4">
            {!isSignedIn && <div className="flex justify-center"><SignInButton /></div>}
            {isSignedIn && <CreatePostWizzard/>}
          </div>
          <Feed/>
        </div>

      </main>
    </>
  );
};

export default Home;
